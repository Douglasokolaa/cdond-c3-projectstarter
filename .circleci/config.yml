version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID} "
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  "https://kvdb.io/9HCPSVNMxbqepvcaqhfJ5m/migration_${CIRCLE_WORKFLOW_ID:0:7}")
            if(( $SUCCESS==1 ))
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

  setup-machine:
    description: install required dependencies
    steps:
      - run:
          name: Install utilities
          command: |
            sudo apt update -y
            sudo apt -y upgrade
            sudo apt install -y tar gzip

      - run:
          name: Install nvm, node, npm
          command: |
            curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
            source /home/circleci/.profile
            nvm install 13.8

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "frontend test"
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "backend test"
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "frontend analysis"
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Backend analysis"
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 6
            npm install --save-dev webpack@5.73.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - setup-machine
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:01:aa:31:2d:55:5a:2c:e5:32:5b:a2:92:f7:ed:30"]
      - attach_workspace:
          at: ~/
      - setup-machine
      - run:
          name: Install Python and Ansible
          command: |
            python3 -V
            sudo apt install -y ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - setup-machine
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl "https://kvdb.io/9HCPSVNMxbqepvcaqhfJ5m/migration_${CIRCLE_WORKFLOW_ID:0:7}"  -d '1'
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:01:aa:31:2d:55:5a:2c:e5:32:5b:a2:92:f7:ed:30"]
      - setup-machine
      - attach_workspace:
          at: ~/
      - run:
          name: Install Python and Ansible
          command: |
            python3 -V
            sudo apt install -y ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[0].[PublicIpAddress]' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d7:01:aa:31:2d:55:5a:2c:e5:32:5b:a2:92:f7:ed:30"]
      - setup-machine
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # make dir path 
            mkdir -p .circleci/ansible/roles/deploy/files
            # Zip the directory
            tar -C backend -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            pwd
            ansible-playbook -i inventory.txt deploy-backend.yml -v
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[0].[PublicIpAddress]' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - destroy-environment
      - revert-migrations
      - slack/notify:
          event: fail
          mentions: "channel"
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  cleanup:
    docker:
      - image: cimg/aws:2022.06.1
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkFlowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo OldWorkFlowID: "${OldWorkFlowID}"
            export CurrentWorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo CurrentWorkflowID: "${CurrentWorkflowID}"
            
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID="$WorkFlowID"
            if [[ "$OldWorkflowID" =~ "CurrentWorkflowID"  ]]
            then
              echo "$OldWorkflowID" is not the same as "$WorkFlowID" deleting Old Stack
              aws s3 rm "s3://udapeople-$OldWorkFlowID" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-$OldWorkFlowID"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-$OldWorkFlowID"
            else
              echo "nothing to needs to be done..."
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          context: SLACK
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
